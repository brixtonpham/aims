-- =====================================================
-- AIMS Database Migration Scripts
-- Version: 1.0
-- Compatible with: PostgreSQL, H2, MySQL
-- =====================================================

-- Migration V1.0.0: Initial Schema Creation
-- File: V1_0_0__Create_Initial_Schema.sql

-- Drop existing tables if they exist (for clean reinstall)
DROP TABLE IF EXISTS payment_transactions CASCADE;
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS delivery_info CASCADE;
DROP TABLE IF EXISTS cart_items CASCADE;
DROP TABLE IF EXISTS carts CASCADE;
DROP TABLE IF EXISTS customer_profiles CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS products CASCADE;

-- Drop views if they exist
DROP VIEW IF EXISTS payment_summary;
DROP VIEW IF EXISTS order_summary;
DROP VIEW IF EXISTS product_inventory;

-- Drop functions and triggers if they exist
DROP TRIGGER IF EXISTS update_products_updated_at ON products;
DROP TRIGGER IF EXISTS update_carts_updated_at ON carts;
DROP TRIGGER IF EXISTS update_cart_items_updated_at ON cart_items;
DROP TRIGGER IF EXISTS update_orders_updated_at ON orders;
DROP TRIGGER IF EXISTS update_order_items_updated_at ON order_items;
DROP TRIGGER IF EXISTS update_delivery_info_updated_at ON delivery_info;
DROP TRIGGER IF EXISTS update_payment_transactions_updated_at ON payment_transactions;
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
DROP TRIGGER IF EXISTS update_customer_profiles_updated_at ON customer_profiles;
DROP TRIGGER IF EXISTS calculate_order_item_total_trigger ON order_items;

DROP FUNCTION IF EXISTS update_updated_at_column();
DROP FUNCTION IF EXISTS calculate_order_item_total();

-- =====================================================
-- V1.0.1: Core Product Tables
-- =====================================================

-- Products table with polymorphic design
CREATE TABLE products (
    product_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_type VARCHAR(20) NOT NULL,
    title VARCHAR(255) NOT NULL,
    price INTEGER NOT NULL CHECK (price > 0),
    weight DECIMAL(10,2),
    rush_order_supported BOOLEAN DEFAULT FALSE,
    image_url VARCHAR(500),
    barcode VARCHAR(50),
    import_date TIMESTAMP,
    introduction TEXT,
    quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Book specific fields
    genre VARCHAR(100),
    page_count INTEGER,
    publication_date DATE,
    authors VARCHAR(255),
    publishers VARCHAR(255),
    cover_type VARCHAR(50),
    
    -- CD specific fields  
    artist VARCHAR(255),
    record_label VARCHAR(255),
    release_date VARCHAR(50),
    track_count INTEGER,
    
    -- DVD specific fields
    director VARCHAR(255),
    runtime_minutes INTEGER,
    studio VARCHAR(255),
    subtitle_languages VARCHAR(255),
    dubbing_languages VARCHAR(255),
    
    CONSTRAINT chk_product_type CHECK (product_type IN ('book', 'cd', 'dvd', 'PRODUCT'))
);

-- =====================================================
-- V1.0.2: Shopping Cart Tables
-- =====================================================

-- Carts table
CREATE TABLE carts (
    cart_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Cart items table
CREATE TABLE cart_items (
    cart_item_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_cart_items_cart FOREIGN KEY (cart_id) REFERENCES carts(cart_id) ON DELETE CASCADE,
    CONSTRAINT fk_cart_items_product FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT uk_cart_product UNIQUE(cart_id, product_id)
);

-- =====================================================
-- V1.0.3: Order Management Tables
-- =====================================================

-- Delivery information table
CREATE TABLE delivery_info (
    delivery_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255),
    address TEXT NOT NULL,
    province VARCHAR(100) NOT NULL,
    delivery_message TEXT,
    delivery_fee INTEGER DEFAULT 0 CHECK (delivery_fee >= 0),
    delivery_type VARCHAR(20) DEFAULT 'STANDARD',
    estimated_delivery_date TIMESTAMP,
    actual_delivery_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT chk_delivery_type CHECK (delivery_type IN ('STANDARD', 'EXPRESS', 'RUSH'))
);

-- Orders table
CREATE TABLE orders (
    order_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id VARCHAR(50) NOT NULL,
    total_before_vat BIGINT DEFAULT 0 CHECK (total_before_vat >= 0),
    total_after_vat BIGINT DEFAULT 0 CHECK (total_after_vat >= 0),
    status VARCHAR(20) DEFAULT 'PENDING',
    vat_rate INTEGER DEFAULT 10 CHECK (vat_rate >= 0 AND vat_rate <= 100),
    order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50),
    is_rush_order BOOLEAN DEFAULT FALSE,
    delivery_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_orders_delivery FOREIGN KEY (delivery_id) REFERENCES delivery_info(delivery_id),
    CONSTRAINT chk_order_status CHECK (status IN ('PENDING', 'CONFIRMED', 'SHIPPED', 'DELIVERED', 'CANCELLED'))
);

-- Order items table  
CREATE TABLE order_items (
    order_item_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    product_title VARCHAR(255) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING',
    rush_order_enabled BOOLEAN DEFAULT FALSE,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price INTEGER NOT NULL CHECK (unit_price >= 0),
    total_fee BIGINT,
    delivery_time TIMESTAMP,
    instructions TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    CONSTRAINT fk_order_items_product FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT chk_order_item_status CHECK (status IN ('PENDING', 'CONFIRMED', 'SHIPPED', 'DELIVERED', 'CANCELLED'))
);

-- =====================================================
-- V1.0.4: Payment System Tables
-- =====================================================

-- Payment transactions table
CREATE TABLE payment_transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id VARCHAR(50) NOT NULL,
    transaction_no VARCHAR(100),
    amount BIGINT NOT NULL CHECK (amount > 0),
    bank_code VARCHAR(20),
    response_code VARCHAR(10),
    transaction_status VARCHAR(20) DEFAULT 'PENDING',
    pay_date VARCHAR(20),
    payment_method VARCHAR(50),
    gateway_transaction_id VARCHAR(100),
    gateway_response_message TEXT,
    currency_code VARCHAR(3) DEFAULT 'VND',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT chk_transaction_status CHECK (transaction_status IN ('PENDING', 'SUCCESS', 'FAILED', 'REFUNDED', 'CANCELLED'))
);

-- =====================================================
-- V1.0.5: User Management Tables (Future Extension)
-- =====================================================

-- Users table
CREATE TABLE users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    role VARCHAR(20) DEFAULT 'CUSTOMER',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT chk_user_role CHECK (role IN ('CUSTOMER', 'ADMIN', 'STAFF'))
);

-- Customer profiles table
CREATE TABLE customer_profiles (
    customer_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT,
    customer_code VARCHAR(50) UNIQUE,
    loyalty_points INTEGER DEFAULT 0,
    preferred_payment_method VARCHAR(50),
    shipping_address TEXT,
    billing_address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_customer_profiles_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- =====================================================
-- V1.0.6: Indexes for Performance
-- =====================================================

-- Product indexes
CREATE INDEX idx_products_type ON products(product_type);
CREATE INDEX idx_products_title ON products(title);
CREATE INDEX idx_products_price ON products(price);
CREATE INDEX idx_products_quantity ON products(quantity);
CREATE INDEX idx_products_rush_order ON products(rush_order_supported);
CREATE INDEX idx_products_created_at ON products(created_at);

-- Cart indexes
CREATE INDEX idx_carts_customer_id ON carts(customer_id);
CREATE INDEX idx_cart_items_cart_id ON cart_items(cart_id);
CREATE INDEX idx_cart_items_product_id ON cart_items(product_id);

-- Order indexes
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_order_time ON orders(order_time);
CREATE INDEX idx_orders_delivery_id ON orders(delivery_id);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX idx_order_items_status ON order_items(status);

-- Payment indexes
CREATE INDEX idx_payment_transactions_order_id ON payment_transactions(order_id);
CREATE INDEX idx_payment_transactions_status ON payment_transactions(transaction_status);
CREATE INDEX idx_payment_transactions_gateway_id ON payment_transactions(gateway_transaction_id);
CREATE INDEX idx_payment_transactions_created_at ON payment_transactions(created_at);
CREATE INDEX idx_payment_transactions_payment_method ON payment_transactions(payment_method);

-- User indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_customer_profiles_user_id ON customer_profiles(user_id);
CREATE INDEX idx_customer_profiles_customer_code ON customer_profiles(customer_code);

-- =====================================================
-- V1.0.7: Database Functions and Triggers
-- =====================================================

-- Function to update timestamps (PostgreSQL specific, adapt for other DBs)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$ language 'plpgsql';

-- Triggers for automatic timestamp updates
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_carts_updated_at BEFORE UPDATE ON carts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cart_items_updated_at BEFORE UPDATE ON cart_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_order_items_updated_at BEFORE UPDATE ON order_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_delivery_info_updated_at BEFORE UPDATE ON delivery_info FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_payment_transactions_updated_at BEFORE UPDATE ON payment_transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_customer_profiles_updated_at BEFORE UPDATE ON customer_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to calculate order item total_fee
CREATE OR REPLACE FUNCTION calculate_order_item_total()
RETURNS TRIGGER AS $
BEGIN
    NEW.total_fee = NEW.quantity * NEW.unit_price;
    RETURN NEW;
END;
$ language 'plpgsql';

-- Trigger for order item total calculation
CREATE TRIGGER calculate_order_item_total_trigger 
    BEFORE INSERT OR UPDATE ON order_items 
    FOR EACH ROW EXECUTE FUNCTION calculate_order_item_total();

-- =====================================================
-- V1.0.8: Views for Complex Queries
-- =====================================================

-- Product inventory view
CREATE VIEW product_inventory AS
SELECT 
    product_id,
    title,
    product_type,
    price,
    quantity,
    CASE 
        WHEN quantity > 50 THEN 'HIGH'
        WHEN quantity > 10 THEN 'MEDIUM'
        WHEN quantity > 0 THEN 'LOW'
        ELSE 'OUT_OF_STOCK'
    END as stock_level,
    rush_order_supported,
    created_at,
    -- Type-specific fields
    CASE 
        WHEN product_type = 'book' THEN CONCAT(authors, ' - ', publishers)
        WHEN product_type = 'cd' THEN CONCAT(artist, ' - ', record_label)
        WHEN product_type = 'dvd' THEN CONCAT(director, ' - ', studio)
        ELSE 'N/A'
    END as creator_info
FROM products
ORDER BY product_type, title;

-- Order summary view with calculated totals
CREATE VIEW order_summary AS
SELECT 
    o.order_id,
    o.customer_id,
    o.status,
    o.total_after_vat,
    o.order_time,
    o.is_rush_order,
    o.payment_method,
    d.name as delivery_name,
    d.address as delivery_address,
    d.province,
    d.delivery_type,
    d.delivery_fee,
    COUNT(oi.order_item_id) as item_count,
    SUM(oi.quantity) as total_quantity,
    SUM(oi.total_fee) as calculated_total,
    -- Payment status from latest transaction
    (SELECT pt.transaction_status 
     FROM payment_transactions pt 
     WHERE pt.order_id = CAST(o.order_id AS VARCHAR) 
     ORDER BY pt.created_at DESC 
     LIMIT 1) as payment_status
FROM orders o
LEFT JOIN delivery_info d ON o.delivery_id = d.delivery_id
LEFT JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY o.order_id, o.customer_id, o.status, o.total_after_vat, 
         o.order_time, o.is_rush_order, o.payment_method,
         d.name, d.address, d.province, d.delivery_type, d.delivery_fee;

-- Payment transaction summary view
CREATE VIEW payment_summary AS
SELECT 
    pt.id as transaction_id,
    pt.order_id,
    pt.transaction_status,
    pt.amount,
    pt.payment_method,
    pt.bank_code,
    pt.response_code,
    pt.created_at as payment_time,
    o.status as order_status,
    o.customer_id,
    o.total_after_vat as order_total,
    CASE 
        WHEN pt.transaction_status = 'SUCCESS' AND o.status = 'PENDING' THEN 'ORDER_NEEDS_CONFIRMATION'
        WHEN pt.transaction_status = 'SUCCESS' AND o.status IN ('CONFIRMED', 'SHIPPED', 'DELIVERED') THEN 'PAYMENT_ORDER_SYNCED'
        WHEN pt.transaction_status = 'FAILED' THEN 'PAYMENT_FAILED'
        WHEN pt.transaction_status = 'PENDING' THEN 'PAYMENT_PENDING'
        ELSE 'OTHER'
    END as sync_status
FROM payment_transactions pt
LEFT JOIN orders o ON pt.order_id = CAST(o.order_id AS VARCHAR)
ORDER BY pt.created_at DESC;

-- Cart details view
CREATE VIEW cart_details AS
SELECT 
    c.cart_id,
    c.customer_id,
    c.created_at as cart_created,
    ci.cart_item_id,
    ci.quantity,
    p.product_id,
    p.title,
    p.product_type,
    p.price,
    (ci.quantity * p.price) as item_total,
    p.rush_order_supported,
    CASE WHEN p.quantity >= ci.quantity THEN TRUE ELSE FALSE END as available
FROM carts c
LEFT JOIN cart_items ci ON c.cart_id = ci.cart_id
LEFT JOIN products p ON ci.product_id = p.product_id
ORDER BY c.cart_id, ci.cart_item_id;

-- =====================================================
-- V1.0.9: Sample Data for Testing
-- =====================================================

-- Insert sample products
INSERT INTO products (product_type, title, price, quantity, rush_order_supported, authors, genre, page_count, publishers, cover_type) VALUES
('book', 'Clean Architecture: A Craftsman''s Guide to Software Structure and Design', 45000, 100, true, 'Robert C. Martin', 'Programming', 432, 'Prentice Hall', 'Paperback'),
('book', 'Design Patterns: Elements of Reusable Object-Oriented Software', 50000, 75, true, 'Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides', 'Programming', 395, 'Addison-Wesley', 'Hardcover'),
('book', 'The Pragmatic Programmer: Your Journey To Mastery', 42000, 120, false, 'Andy Hunt, Dave Thomas', 'Programming', 352, 'Addison-Wesley', 'Paperback'),
('book', 'Effective Java', 38000, 90, true, 'Joshua Bloch', 'Programming', 416, 'Addison-Wesley', 'Paperback'),
('book', 'Spring in Action', 55000, 60, false, 'Craig Walls', 'Programming', 520, 'Manning Publications', 'Paperback');

INSERT INTO products (product_type, title, price, quantity, rush_order_supported, artist, genre, record_label, track_count, release_date) VALUES
('cd', 'Abbey Road', 25000, 50, false, 'The Beatles', 'Rock', 'Apple Records', 17, '1969'),
('cd', 'Dark Side of the Moon', 28000, 40, false, 'Pink Floyd', 'Progressive Rock', 'Harvest Records', 10, '1973'),
('cd', 'Thriller', 22000, 65, false, 'Michael Jackson', 'Pop', 'Epic Records', 9, '1982'),
('cd', 'Back in Black', 24000, 35, false, 'AC/DC', 'Hard Rock', 'Atlantic Records', 10, '1980');

INSERT INTO products (product_type, title, price, quantity, rush_order_supported, director, genre, runtime_minutes, studio, subtitle_languages) VALUES
('dvd', 'The Shawshank Redemption', 15000, 80, false, 'Frank Darabont', 'Drama', 142, 'Castle Rock Entertainment', 'English, Vietnamese'),
('dvd', 'Inception', 18000, 60, true, 'Christopher Nolan', 'Sci-Fi', 148, 'Warner Bros', 'English, Vietnamese, Korean'),
('dvd', 'The Godfather', 20000, 45, false, 'Francis Ford Coppola', 'Crime', 175, 'Paramount Pictures', 'English, Vietnamese'),
('dvd', 'Pulp Fiction', 16000, 70, false, 'Quentin Tarantino', 'Crime', 154, 'Miramax Films', 'English, Vietnamese, French');

-- Insert sample users
INSERT INTO users (username, email, password_hash, first_name, last_name, phone, role) VALUES
('admin', 'admin@aims.com', '$2a$10$dummy.hash.for.admin.user.password', 'System', 'Administrator', '+84900000000', 'ADMIN'),
('customer1', 'john.doe@aims.com', '$2a$10$dummy.hash.for.customer1.password', 'John', 'Doe', '+84901234567', 'CUSTOMER'),
('customer2', 'jane.smith@aims.com', '$2a$10$dummy.hash.for.customer2.password', 'Jane', 'Smith', '+84987654321', 'CUSTOMER'),
('staff1', 'staff@aims.com', '$2a$10$dummy.hash.for.staff.user.password', 'Staff', 'Member', '+84905555555', 'STAFF');

-- Insert sample customer profiles
INSERT INTO customer_profiles (user_id, customer_code, loyalty_points, preferred_payment_method, shipping_address) VALUES
(2, 'CUST001', 1500, 'VNPAY', '123 Main Street, District 1, Ho Chi Minh City'),
(3, 'CUST002', 2300, 'VNPAY', '456 Oak Avenue, Ba Dinh District, Hanoi');

-- Insert sample delivery info
INSERT INTO delivery_info (name, phone, email, address, province, delivery_type, delivery_fee) VALUES
('John Doe', '+84901234567', 'john.doe@aims.com', '123 Main Street, District 1', 'Ho Chi Minh City', 'STANDARD', 30000),
('Jane Smith', '+84987654321', 'jane.smith@aims.com', '456 Oak Avenue, Ba Dinh District', 'Hanoi', 'EXPRESS', 45000),
('Bob Johnson', '+84912345678', 'bob.johnson@aims.com', '789 Pine Road, District 3', 'Ho Chi Minh City', 'RUSH', 60000);

-- Insert sample orders
INSERT INTO orders (customer_id, total_before_vat, total_after_vat, status, payment_method, is_rush_order, delivery_id) VALUES
('CUST001', 90000, 99000, 'PENDING', 'VNPAY', false, 1),
('CUST002', 150000, 165000, 'CONFIRMED', 'VNPAY', true, 2),
('CUST001', 45000, 49500, 'DELIVERED', 'VNPAY', false, 3);

-- Insert sample order items
INSERT INTO order_items (order_id, product_id, product_title, quantity, unit_price) VALUES
(1, 1, 'Clean Architecture: A Craftsman''s Guide to Software Structure and Design', 2, 45000),
(2, 2, 'Design Patterns: Elements of Reusable Object-Oriented Software', 2, 50000),
(2, 6, 'Abbey Road', 2, 25000),
(3, 1, 'Clean Architecture: A Craftsman''s Guide to Software Structure and Design', 1, 45000);

-- Insert sample payment transactions
INSERT INTO payment_transactions (order_id, amount, transaction_status, payment_method, bank_code, response_code) VALUES
('1', 99000, 'PENDING', 'VNPAY', 'NCB', NULL),
('2', 165000, 'SUCCESS', 'VNPAY', 'VIETCOMBANK', '00'),
('3', 49500, 'SUCCESS', 'VNPAY', 'TECHCOMBANK', '00');

-- Insert sample cart data
INSERT INTO carts (customer_id) VALUES
('CUST001'),
('CUST002');

INSERT INTO cart_items (cart_id, product_id, quantity) VALUES
(1, 3, 1),
(1, 7, 2),
(2, 4, 1),
(2, 8, 1);

-- =====================================================
-- V1.0.10: Database Maintenance Procedures
-- =====================================================

-- Procedure to clean up old carts (older than 30 days)
CREATE OR REPLACE FUNCTION cleanup_old_carts()
RETURNS INTEGER AS $
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM carts 
    WHERE updated_at < (CURRENT_TIMESTAMP - INTERVAL '30 days')
    AND cart_id NOT IN (
        SELECT DISTINCT cart_id 
        FROM cart_items 
        WHERE updated_at >= (CURRENT_TIMESTAMP - INTERVAL '7 days')
    );
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$ LANGUAGE plpgsql;

-- Procedure to update product stock levels
CREATE OR REPLACE FUNCTION update_product_stock(p_product_id BIGINT, p_quantity_change INTEGER)
RETURNS BOOLEAN AS $
DECLARE
    current_quantity INTEGER;
BEGIN
    SELECT quantity INTO current_quantity 
    FROM products 
    WHERE product_id = p_product_id;
    
    IF current_quantity IS NULL THEN
        RETURN FALSE;
    END IF;
    
    IF (current_quantity + p_quantity_change) < 0 THEN
        RETURN FALSE;
    END IF;
    
    UPDATE products 
    SET quantity = quantity + p_quantity_change 
    WHERE product_id = p_product_id;
    
    RETURN TRUE;
END;
$ LANGUAGE plpgsql;

-- =====================================================
-- Migration Complete
-- =====================================================

-- Verify installation
SELECT 'AIMS Database Schema Installation Complete' as status;

-- Display table counts
SELECT 
    'products' as table_name, COUNT(*) as record_count FROM products
UNION ALL
SELECT 'users', COUNT(*) FROM users
UNION ALL  
SELECT 'orders', COUNT(*) FROM orders
UNION ALL
SELECT 'order_items', COUNT(*) FROM order_items
UNION ALL
SELECT 'carts', COUNT(*) FROM carts
UNION ALL
SELECT 'cart_items', COUNT(*) FROM cart_items
UNION ALL
SELECT 'payment_transactions', COUNT(*) FROM payment_transactions
ORDER BY table_name;
